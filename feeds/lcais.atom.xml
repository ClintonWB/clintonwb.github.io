<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Clinton's blog</title><link href="http://clintonbradford.com/" rel="alternate"></link><link href="http://clintonbradford.com/feeds/lcais.atom.xml" rel="self"></link><id>http://clintonbradford.com/</id><updated>2017-06-04T02:00:00-04:00</updated><entry><title>Why I started lcais</title><link href="http://clintonbradford.com/posts/2017/06/lcais-initial/" rel="alternate"></link><updated>2017-06-04T02:00:00-04:00</updated><author><name>Clinton Bradford</name></author><id>tag:clintonbradford.com,2017-06-04:posts/2017/06/lcais-initial/</id><summary type="html">&lt;blockquote&gt;
&lt;p&gt;While the MVP used simple joining and separating of text inputs, the true project will keep a tree of javascript objects to hold the values.&lt;/p&gt;
&lt;p&gt;In the next post, I will explain the decisions behind that tree - and its three base classes - and hope to break down the basic structure for an exercise like this.&lt;/p&gt;
&lt;/blockquote&gt;
</summary><category term="lcais"></category><category term="dev"></category><category term="js"></category><category term="purdue"></category><category term="loncapa"></category></entry></feed>